const fs = require('fs');
const path = require('path');

/**
 * Generate dummy documentation for demonstration purposes
 * @param {string} outputDir Output directory
 * @param {number} port Server port
 * @param {object} spinner Ora spinner instance
 */
async function generateDummyDocumentation(outputDir, port, spinner) {
  // Create output directory if it doesn't exist
  const fullOutputPath = path.resolve(process.cwd(), outputDir);
  if (!fs.existsSync(fullOutputPath)) {
    fs.mkdirSync(fullOutputPath, { recursive: true });
  }
  
  // Create subdirectories
  const dirs = ['erd', 'uml', 'sequence', 'api'];
  dirs.forEach(dir => {
    const dirPath = path.join(fullOutputPath, dir);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  });
  
  // Generate main index.html
  spinner.text = 'Generating main index page...';
  generateMainIndex(fullOutputPath);
  
  // Generate styles
  spinner.text = 'Generating styles...';
  generateStyles(fullOutputPath);
  
  // Generate ERD diagram
  spinner.text = 'Generating ERD diagram...';
  generateDummyERD(path.join(fullOutputPath, 'erd'));
  
  // Generate UML diagram
  spinner.text = 'Generating UML diagram...';
  generateDummyUML(path.join(fullOutputPath, 'uml'));
  
  // Generate sequence diagrams
  spinner.text = 'Generating sequence diagrams...';
  generateDummySequence(path.join(fullOutputPath, 'sequence'));
  
  // Generate API documentation
  spinner.text = 'Generating API documentation...';
  generateDummyAPI(path.join(fullOutputPath, 'api'));
  
  spinner.text = 'Dummy documentation generated successfully!';
  spinner.succeed();
  
  // Serve the documentation
  const app = express();
  
  // Serve static files from documentation directory
  app.use(express.static(fullOutputPath));
  
  // Route all requests to index.html
  app.get('*', (req, res) => {
    res.sendFile(path.join(fullOutputPath, 'index.html'));
  });
  
  // Start the server
  app.listen(port, () => {
    console.log(chalk.green(`\nüöÄ Documentation server started!`));
    console.log(chalk.cyan(`üìö View your documentation at: http://localhost:${port}`));
    console.log(chalk.yellow(`üîç Documentation files are in: ${fullOutputPath}\n`));
    
    // Open browser automatically
    open(`http://localhost:${port}`);
  });
}

function generateMainIndex(outputDir) {
  const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Laravel2Doc - Documentation</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="navbar">
    <div class="navbar-title">Laravel2Doc</div>
    <div class="navbar-links">
      <a href="erd/">ERD</a>
      <a href="uml/">UML</a>
      <a href="sequence/">Sequence</a>
      <a href="api/">API</a>
    </div>
  </div>

  <header>
    <h1>Laravel2Doc</h1>
    <h2>Example Laravel Application Documentation</h2>
  </header>
  
  <main>
    <div class="introduction">
      <h3>Welcome to Laravel2Doc</h3>
      <p>
        This is a demonstration of the Laravel2Doc package, which automatically generates comprehensive documentation for Laravel applications.
        Since this is running outside a Laravel project, we're showing you example documentation to demonstrate the features.
      </p>
      <p>
        In a real Laravel project, Laravel2Doc would automatically analyze your code and generate documentation based on your models, controllers, migrations, and more.
      </p>
    </div>
    
    <div class="doc-cards">
      <div class="doc-card">
        <h3>Entity Relationship Diagrams</h3>
        <p>Visual representation of your database schema, showing tables, columns, and relationships.</p>
        <a href="erd/" class="card-button">View ERD</a>
      </div>
      
      <div class="doc-card">
        <h3>UML Class Diagrams</h3>
        <p>Object-oriented view of your application's models and their relationships.</p>
        <a href="uml/" class="card-button">View UML</a>
      </div>
      
      <div class="doc-card">
        <h3>Sequence Diagrams</h3>
        <p>Flow of interactions between components for common operations in your application.</p>
        <a href="sequence/" class="card-button">View Sequence Diagrams</a>
      </div>
      
      <div class="doc-card">
        <h3>API Documentation</h3>
        <p>Comprehensive documentation of your application's API endpoints and their parameters.</p>
        <a href="api/" class="card-button">View API Docs</a>
      </div>
    </div>
  </main>
  
  <footer>
    <p>Generated by Laravel2Doc - <a href="https://github.com/priom7/laravel2doc">GitHub</a></p>
  </footer>
</body>
</html>
  `;
  
  fs.writeFileSync(path.join(outputDir, 'index.html'), htmlContent);
}

function generateStyles(outputDir) {
  const cssContent = `
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: #333;
  margin: 0;
  padding: 0;
  background-color: #f8f9fa;
}

.navbar {
  background-color: #2c3e50;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 2rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar-title {
  font-size: 1.5rem;
  font-weight: bold;
}

.navbar-links a {
  color: white;
  text-decoration: none;
  margin-left: 1.5rem;
  transition: color 0.3s;
}

.navbar-links a:hover {
  color: #3498db;
}

header {
  text-align: center;
  padding: 2rem 1rem;
  background-color: #3498db;
  color: white;
}

header h1 {
  margin: 0;
  font-size: 2.5rem;
}

header h2 {
  margin: 0.5rem 0 0;
  font-weight: normal;
  font-size: 1.2rem;
}

main {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.introduction {
  background-color: white;
  padding: 1.5rem;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.doc-cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
}

.doc-card {
  background-color: white;
  padding: 1.5rem;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s, box-shadow 0.3s;
}

.doc-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.card-button {
  display: inline-block;
  background-color: #3498db;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  text-decoration: none;
  margin-top: 1rem;
  transition: background-color 0.3s;
}

.card-button:hover {
  background-color: #2980b9;
}

footer {
  text-align: center;
  padding: 1rem;
  background-color: #2c3e50;
  color: white;
  margin-top: 2rem;
}

footer a {
  color: #3498db;
  text-decoration: none;
}

.diagram-container {
  background-color: white;
  padding: 1.5rem;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
  overflow-x: auto;
}

.legend {
  background-color: white;
  padding: 1.5rem;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.markdown-body {
  background-color: white;
  padding: 1.5rem;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.markdown-body h1, .markdown-body h2, .markdown-body h3 {
  margin-top: 1.5rem;
  margin-bottom: 1rem;
}

.markdown-body hr {
  margin: 2rem 0;
  border: 0;
  border-top: 1px solid #eee;
}

.markdown-body code {
  background-color: #f5f5f5;
  padding: 0.2rem 0.4rem;
  border-radius: 3px;
}

.index-container {
  background-color: white;
  padding: 1.5rem;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.diagram-list {
  columns: 2;
  column-gap: 2rem;
  list-style-type: none;
  padding: 0;
}

.diagram-list li {
  margin-bottom: 0.5rem;
}

.diagram-list a {
  text-decoration: none;
  color: #3498db;
}

@media (max-width: 768px) {
  .navbar {
    flex-direction: column;
    padding: 1rem;
  }
  
  .navbar-links {
    margin-top: 1rem;
  }
  
  .navbar-links a {
    margin-left: 0.75rem;
    margin-right: 0.75rem;
  }
  
  .diagram-list {
    columns: 1;
  }
}
  `;
  
  fs.writeFileSync(path.join(outputDir, 'styles.css'), cssContent);
}

function generateDummyERD(outputDir) {
  const mermaidContent = `erDiagram
  users {
    int id PK
    string name
    string email
    string password
    datetime created_at
    datetime updated_at
  }
  
  posts {
    int id PK
    int user_id FK
    string title
    string content
    datetime published_at
    datetime created_at
    datetime updated_at
  }
  
  comments {
    int id PK
    int user_id FK
    int post_id FK
    string content
    datetime created_at
    datetime updated_at
  }
  
  categories {
    int id PK
    string name
    string slug
    datetime created_at
    datetime updated_at
  }
  
  post_category {
    int id PK
    int post_id FK
    int category_id FK
    datetime created_at
    datetime updated_at
  }
  
  users ||--o{ posts : "creates"
  users ||--o{ comments : "writes"
  posts ||--o{ comments : "has"
  posts }|--|{ categories : "belongs to"
  `;
  
  // Write ERD diagram to file
  fs.writeFileSync(path.join(outputDir, 'database_erd.md'), mermaidContent);
  
  // Create HTML file to display the ERD
  const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ERD Diagram - Example Laravel Blog</title>
  <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
  <link rel="stylesheet" href="../styles.css">
</head>
<body>
  <div class="navbar">
    <div class="navbar-title">Laravel2Doc</div>
    <div class="navbar-links">
      <a href="../">Home</a>
      <a href="../erd/">ERD</a>
      <a href="../uml/">UML</a>
      <a href="../sequence/">Sequence</a>
      <a href="../api/">API</a>
    </div>
  </div>

  <header>
    <h1>Entity Relationship Diagram</h1>
    <h2>Example Laravel Blog Application</h2>
  </header>
  
  <main>
    <div class="diagram-container">
      <div class="mermaid">
${mermaidContent}
      </div>
    </div>
    
    <div class="legend">
      <h3>Relationship Legend</h3>
      <ul>
        <li><strong>||--o|</strong>: One-to-One</li>
        <li><strong>||--|{</strong>: One-to-Many</li>
        <li><strong>}|--||</strong>: Belongs-To</li>
        <li><strong>}|--|{</strong>: Many-to-Many</li>
        <li><strong>||--o{</strong>: Polymorphic</li>
      </ul>
    </div>
  </main>
  
  <script>
    mermaid.initialize({
      startOnLoad: true,
      theme: 'default',
      securityLevel: 'loose',
      er: {
        diagramPadding: 20
      }
    });
  </script>
</body>
</html>
  `;
  
  fs.writeFileSync(path.join(outputDir, 'index.html'), htmlContent);
}

function generateDummyUML(outputDir) {
    const classDiagram = `classDiagram
    class User {
      +id
      +name
      +email
      +email_verified_at
      +password
      +remember_token
      +created_at
      +updated_at
      +posts()
      +comments()
    }
    
    class Post {
      +id
      +user_id
      +title
      +content
      +published_at
      +created_at
      +updated_at
      +user()
      +comments()
      +categories()
    }
    
    class Comment {
      +id
      +user_id
      +post_id
      +content
      +created_at
      +updated_at
      +user()
      +post()
    }
    
    class Category {
      +id
      +name
      +slug
      +created_at
      +updated_at
      +posts()
    }
    
    User --> Post : posts
    User --> Comment : comments
    Post --> Comment : comments
    Post --> Category : categories
    `;
    
    // Write class diagram to file
    fs.writeFileSync(path.join(outputDir, 'class_diagram.md'), classDiagram);
    
    // Create HTML file to display the class diagram
    const htmlContent = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UML Class Diagram - Example Laravel Blog</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
    <link rel="stylesheet" href="../styles.css">
  </head>
  <body>
    <div class="navbar">
      <div class="navbar-title">Laravel2Doc</div>
      <div class="navbar-links">
        <a href="../">Home</a>
        <a href="../erd/">ERD</a>
        <a href="../uml/">UML</a>
        <a href="../sequence/">Sequence</a>
        <a href="../api/">API</a>
      </div>
    </div>
  
    <header>
      <h1>UML Class Diagram</h1>
      <h2>Example Laravel Blog Application</h2>
    </header>
    
    <main>
      <div class="diagram-container">
        <div class="mermaid">
  ${classDiagram}
        </div>
      </div>
    </main>
    
    <script>
      mermaid.initialize({
        startOnLoad: true,
        theme: 'default',
        securityLevel: 'loose'
      });
    </script>
  </body>
  </html>
    `;
    
    fs.writeFileSync(path.join(outputDir, 'index.html'), htmlContent);
  }
  
  function generateDummySequence(outputDir) {
    // Store diagrams and their content
    const diagrams = [
      {
        name: 'PostController::index',
        type: 'list',
        content: `sequenceDiagram
    participant C as Client
    participant R as Route
    participant PC as PostController
    participant P as Post
    participant DB as Database
    
    C->>R: GET /posts
    R->>+PC: index()
    PC->>+P: with('user', 'categories')->get()
    P->>+DB: SELECT * FROM posts WITH RELATED DATA
    DB-->>-P: Return records
    P-->>-PC: Collection of posts
    PC-->>-R: Return JSON response
    R-->>C: 200 OK with data`
      },
      {
        name: 'PostController::show',
        type: 'show',
        content: `sequenceDiagram
    participant C as Client
    participant R as Route
    participant PC as PostController
    participant P as Post
    participant DB as Database
    
    C->>R: GET /posts/{id}
    R->>+PC: show(id)
    PC->>+P: with('user', 'comments.user', 'categories')->findOrFail(id)
    P->>+DB: SELECT * FROM posts WHERE id = ? WITH RELATED DATA
    DB-->>-P: Return record
    P-->>-PC: Post instance
    PC-->>-R: Return JSON response
    R-->>C: 200 OK with data`
      },
      {
        name: 'PostController::store',
        type: 'create',
        content: `sequenceDiagram
    participant C as Client
    participant R as Route
    participant PC as PostController
    participant V as Validator
    participant P as Post
    participant DB as Database
    
    C->>R: POST /posts
    R->>+PC: store(request)
    PC->>+V: validate(request)
    V-->>-PC: validated data
    PC->>+P: create(data)
    P->>+DB: INSERT INTO posts
    DB-->>-P: Return new record
    P-->>-PC: New post instance
    PC-->>-R: Return JSON response
    R-->>C: 201 Created with data`
      }
    ];
    
    // Write each diagram to its own file
    diagrams.forEach(diagram => {
      const fileName = `${diagram.name.replace('::', '_')}.md`;
      fs.writeFileSync(path.join(outputDir, fileName), diagram.content);
    });
    
    // Create index file for sequence diagrams
    const indexContent = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sequence Diagrams - Example Laravel Blog</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
    <link rel="stylesheet" href="../styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  </head>
  <body>
    <div class="navbar">
      <div class="navbar-title">Laravel2Doc</div>
      <div class="navbar-links">
        <a href="https://laravel2doc.netlify.app/">Home</a>
        <a href="../erd/">ERD</a>
        <a href="../uml/">UML</a>
        <a href="../sequence/">Sequence</a>
        <a href="../api/">API</a>
      </div>
    </div>
  
    <header>
      <h1>Sequence Diagrams</h1>
      <h2>Example Laravel Blog Application</h2>
    </header>
    
    <main>
      <div class="index-container">
        <h3>Available Diagrams</h3>
        <ul class="diagram-list">
          ${diagrams.map(d => `<li><a href="#${d.name}">${d.name}</a> (${d.type})</li>`).join('\n        ')}
        </ul>
      </div>
      
      ${diagrams.map(d => `
      <div class="diagram-container" id="${d.name}">
        <h3>${d.name}</h3>
        <div class="mermaid">
  ${d.content}
        </div>
      </div>
      `).join('\n    ')}
    </main>
    
    <script>
      mermaid.initialize({
        startOnLoad: true,
        theme: 'default',
        securityLevel: 'loose'
      });
    </script>
  </body>
  </html>
    `;
    
    fs.writeFileSync(path.join(outputDir, 'index.html'), indexContent);
  }
  
  function generateDummyAPI(outputDir) {
    // Create dummy API markdown
    const apiMarkdown = `# API Documentation
  
  ## api.php
  
  ### GET /api/posts
  
  **Handler:** PostController@index
  
  **Description:** Get all posts
  
  **Parameters:**
  
  - \`request\` (Request)
  
  ---
  
  ### GET /api/posts/{id}
  
  **Handler:** PostController@show
  
  **Description:** Get a specific post
  
  **Parameters:**
  
  - \`request\` (Request)
  - \`id\` (int)
  
  ---
  
  ### POST /api/posts
  
  **Handler:** PostController@store
  
  **Description:** Store a new post
  
  **Parameters:**
  
  - \`request\` (Request)
  
  ---
  
  ### PUT /api/posts/{id}
  
  **Handler:** PostController@update
  
  **Description:** Update a specific post
  
  **Parameters:**
  
  - \`request\` (Request)
  - \`id\` (int)
  
  ---
  
  ### DELETE /api/posts/{id}
  
  **Handler:** PostController@destroy
  
  **Description:** Delete a specific post
  
  **Parameters:**
  
  - \`id\` (int)
  
  ---
  
  ### GET /api/categories
  
  **Handler:** CategoryController@index
  
  **Description:** Get all categories
  
  **Parameters:**
  
  - \`request\` (Request)
  
  ---
  
  ### GET /api/users/me
  
  **Handler:** UserController@profile
  
  **Description:** Get authenticated user profile
  
  **Parameters:**
  
  - \`request\` (Request)
  
  ---
  
  ## web.php
  
  ### GET /
  
  **Handler:** HomeController@index
  
  **Description:** Show homepage
  
  ---
  
  ### GET /posts
  
  **Handler:** PostController@index
  
  **Description:** Show all posts
  
  ---
  
  ### GET /posts/{id}
  
  **Handler:** PostController@show
  
  **Description:** Show a specific post
  
  **Parameters:**
  
  - \`id\` (int)
  
  ---
  
  ### GET /categories/{slug}
  
  **Handler:** CategoryController@show
  
  **Description:** Show posts in a category
  
  **Parameters:**
  
  - \`slug\` (string)
  
  ---`;
  
    // Write API documentation to file
    fs.writeFileSync(path.join(outputDir, 'api.md'), apiMarkdown);
    
    // Create HTML file to display the API documentation
    const htmlContent = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Documentation - Example Laravel Blog</title>
    <link rel="stylesheet" href="../styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
  </head>
  <body>
    <div class="navbar">
      <div class="navbar-title">Laravel2Doc</div>
      <div class="navbar-links">
        <a href="../">Home</a>
        <a href="../erd/">ERD</a>
        <a href="../uml/">UML</a>
        <a href="../sequence/">Sequence</a>
        <a href="../api/">API</a>
      </div>
    </div>
  
    <header>
      <h1>API Documentation</h1>
      <h2>Example Laravel Blog Application</h2>
    </header>
    
    <main class="markdown-body">
      <div id="api-content">
        ${markdownToHtml(apiMarkdown)}
      </div>
    </main>
    
    <script>
      hljs.highlightAll();
    </script>
  </body>
  </html>
    `;
    
    fs.writeFileSync(path.join(outputDir, 'index.html'), htmlContent);
  }

  /**
 * Convert markdown to HTML for the documentation
 * @param {string} markdown Markdown content
 * @returns {string} HTML content
 */
function markdownToHtml(markdown) {
    let html = markdown;
    
    // Headers
    html = html.replace(/^# (.*?)$/gm, '<h1>$1</h1>');
    html = html.replace(/^## (.*?)$/gm, '<h2>$1</h2>');
    html = html.replace(/^### (.*?)$/gm, '<h3>$1</h3>');
    
    // Bold
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    // Inline code
    html = html.replace(/`(.*?)`/g, '<code>$1</code>');
    
    // Lists
    html = html.replace(/^- (.*?)$/gm, '<li>$1</li>');
    html = html.replace(/(<li>.*?<\/li>\n)+/g, '<ul>$&</ul>');
    
    // Horizontal rule
    html = html.replace(/^---$/gm, '<hr>');
    
    // Paragraphs
    html = html.replace(/^(?!<[h|u|l|p|o])(.*?)$/gm, '<p>$1</p>');
    
    // Clean up empty paragraphs
    html = html.replace(/<p><\/p>/g, '');
    
    return html;
  }
  
  module.exports = {
    generateDummyDocumentation
  };